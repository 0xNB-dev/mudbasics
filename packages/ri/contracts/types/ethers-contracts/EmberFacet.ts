/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EmberFacetInterface extends utils.Interface {
  contractName: "EmberFacet";
  functions: {
    "addComponentToEntityExternally(uint256,address,bytes)": FunctionFragment;
    "callerEntityID()": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "removeComponentFromEntityExternally(uint256,address)": FunctionFragment;
    "world()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addComponentToEntityExternally",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "callerEntityID", values?: undefined): string;
  encodeFunctionData(functionFragment: "entryPoint", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeComponentFromEntityExternally", values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addComponentToEntityExternally", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callerEntityID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeComponentFromEntityExternally", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;

  events: {};
}

export interface EmberFacet extends BaseContract {
  contractName: "EmberFacet";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmberFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addComponentToEntityExternally(
      entity: BigNumberish,
      component: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callerEntityID(overrides?: CallOverrides): Promise<[BigNumber]>;

    entryPoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    removeComponentFromEntityExternally(
      entity: BigNumberish,
      component: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    world(overrides?: CallOverrides): Promise<[string]>;
  };

  addComponentToEntityExternally(
    entity: BigNumberish,
    component: string,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callerEntityID(overrides?: CallOverrides): Promise<BigNumber>;

  entryPoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  removeComponentFromEntityExternally(
    entity: BigNumberish,
    component: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  world(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addComponentToEntityExternally(
      entity: BigNumberish,
      component: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    callerEntityID(overrides?: CallOverrides): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<void>;

    removeComponentFromEntityExternally(
      entity: BigNumberish,
      component: string,
      overrides?: CallOverrides
    ): Promise<void>;

    world(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addComponentToEntityExternally(
      entity: BigNumberish,
      component: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callerEntityID(overrides?: CallOverrides): Promise<BigNumber>;

    entryPoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeComponentFromEntityExternally(
      entity: BigNumberish,
      component: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    world(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addComponentToEntityExternally(
      entity: BigNumberish,
      component: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callerEntityID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entryPoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    removeComponentFromEntityExternally(
      entity: BigNumberish,
      component: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    world(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
