/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SpellStruct = {
  embodiedSystemSelector: BytesLike;
  spellTargetFilter: BigNumberish;
};

export type SpellStructOutput = [string, number] & {
  embodiedSystemSelector: string;
  spellTargetFilter: number;
};

export interface SpellComponentInterface extends utils.Interface {
  contractName: "SpellComponent";
  functions: {
    "getEntities()": FunctionFragment;
    "getEntitiesWithValue((bytes4,uint8))": FunctionFragment;
    "getID()": FunctionFragment;
    "getRawValue(uint256)": FunctionFragment;
    "getValue(uint256)": FunctionFragment;
    "has(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerIndexer(address)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "set(uint256,(bytes4,uint8))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "world()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getEntities", values?: undefined): string;
  encodeFunctionData(functionFragment: "getEntitiesWithValue", values: [SpellStruct]): string;
  encodeFunctionData(functionFragment: "getID", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRawValue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getValue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "has", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registerIndexer", values: [string]): string;
  encodeFunctionData(functionFragment: "remove", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "set", values: [BigNumberish, SpellStruct]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "world", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getEntities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEntitiesWithValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRawValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "has", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerIndexer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "world", data: BytesLike): Result;

  events: {};
}

export interface SpellComponent extends BaseContract {
  contractName: "SpellComponent";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpellComponentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEntities(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getEntitiesWithValue((bytes4,uint8))"(spell: SpellStruct, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "getEntitiesWithValue(bytes)"(value: BytesLike, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRawValue(entity: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getValue(entity: BigNumberish, overrides?: CallOverrides): Promise<[SpellStructOutput]>;

    has(entity: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerIndexer(
      indexer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove(
      entity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,(bytes4,uint8))"(
      entity: BigNumberish,
      value: SpellStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,bytes)"(
      entity: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    world(overrides?: CallOverrides): Promise<[string]>;
  };

  getEntities(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getEntitiesWithValue((bytes4,uint8))"(spell: SpellStruct, overrides?: CallOverrides): Promise<BigNumber[]>;

  "getEntitiesWithValue(bytes)"(value: BytesLike, overrides?: CallOverrides): Promise<BigNumber[]>;

  getID(overrides?: CallOverrides): Promise<BigNumber>;

  getRawValue(entity: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getValue(entity: BigNumberish, overrides?: CallOverrides): Promise<SpellStructOutput>;

  has(entity: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerIndexer(
    indexer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove(
    entity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,(bytes4,uint8))"(
    entity: BigNumberish,
    value: SpellStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,bytes)"(
    entity: BigNumberish,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  world(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getEntities(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getEntitiesWithValue((bytes4,uint8))"(spell: SpellStruct, overrides?: CallOverrides): Promise<BigNumber[]>;

    "getEntitiesWithValue(bytes)"(value: BytesLike, overrides?: CallOverrides): Promise<BigNumber[]>;

    getID(overrides?: CallOverrides): Promise<BigNumber>;

    getRawValue(entity: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getValue(entity: BigNumberish, overrides?: CallOverrides): Promise<SpellStructOutput>;

    has(entity: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerIndexer(indexer: string, overrides?: CallOverrides): Promise<void>;

    remove(entity: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "set(uint256,(bytes4,uint8))"(entity: BigNumberish, value: SpellStruct, overrides?: CallOverrides): Promise<void>;

    "set(uint256,bytes)"(entity: BigNumberish, value: BytesLike, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    world(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getEntities(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntitiesWithValue((bytes4,uint8))"(spell: SpellStruct, overrides?: CallOverrides): Promise<BigNumber>;

    "getEntitiesWithValue(bytes)"(value: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getID(overrides?: CallOverrides): Promise<BigNumber>;

    getRawValue(entity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getValue(entity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    has(entity: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerIndexer(indexer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    remove(entity: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    "set(uint256,(bytes4,uint8))"(
      entity: BigNumberish,
      value: SpellStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256,bytes)"(
      entity: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    world(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getEntities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEntitiesWithValue((bytes4,uint8))"(
      spell: SpellStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEntitiesWithValue(bytes)"(value: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRawValue(entity: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValue(entity: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    has(entity: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerIndexer(
      indexer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      entity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,(bytes4,uint8))"(
      entity: BigNumberish,
      value: SpellStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,bytes)"(
      entity: BigNumberish,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    world(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
